"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.IVideoFrameObserver = exports.IVideoEncodedFrameObserver = exports.IMediaRecorderObserver = exports.IFaceInfoObserver = exports.IAudioSpectrumObserver = exports.IAudioPcmFrameSink = exports.IAudioFrameObserverBase = exports.IAudioFrameObserver = void 0;
var t = _interopRequireWildcard(require("ts-interface-checker"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * This module was automatically generated by `ts-interface-builder`
 */

// tslint:disable:object-literal-key-quotes

const IAudioPcmFrameSink = t.iface([], {
  "onFrame": t.opt(t.func("void", t.param("frame", "AudioPcmFrame")))
});
exports.IAudioPcmFrameSink = IAudioPcmFrameSink;
const IAudioFrameObserverBase = t.iface([], {
  "onRecordAudioFrame": t.opt(t.func("void", t.param("channelId", "string"), t.param("audioFrame", "AudioFrame"))),
  "onPlaybackAudioFrame": t.opt(t.func("void", t.param("channelId", "string"), t.param("audioFrame", "AudioFrame"))),
  "onMixedAudioFrame": t.opt(t.func("void", t.param("channelId", "string"), t.param("audioFrame", "AudioFrame"))),
  "onEarMonitoringAudioFrame": t.opt(t.func("void", t.param("audioFrame", "AudioFrame")))
});
exports.IAudioFrameObserverBase = IAudioFrameObserverBase;
const IAudioFrameObserver = t.iface(["IAudioFrameObserverBase"], {
  "onPlaybackAudioFrameBeforeMixing": t.opt(t.func("void", t.param("channelId", "string"), t.param("uid", "number"), t.param("audioFrame", "AudioFrame")))
});
exports.IAudioFrameObserver = IAudioFrameObserver;
const IAudioSpectrumObserver = t.iface([], {
  "onLocalAudioSpectrum": t.opt(t.func("void", t.param("data", "AudioSpectrumData"))),
  "onRemoteAudioSpectrum": t.opt(t.func("void", t.param("spectrums", t.array("UserAudioSpectrumInfo")), t.param("spectrumNumber", "number")))
});
exports.IAudioSpectrumObserver = IAudioSpectrumObserver;
const IVideoEncodedFrameObserver = t.iface([], {
  "onEncodedVideoFrameReceived": t.opt(t.func("void", t.param("uid", "number"), t.param("imageBuffer", "Uint8Array"), t.param("length", "number"), t.param("videoEncodedFrameInfo", "EncodedVideoFrameInfo")))
});
exports.IVideoEncodedFrameObserver = IVideoEncodedFrameObserver;
const IVideoFrameObserver = t.iface([], {
  "onCaptureVideoFrame": t.opt(t.func("void", t.param("sourceType", "VideoSourceType"), t.param("videoFrame", "VideoFrame"))),
  "onPreEncodeVideoFrame": t.opt(t.func("void", t.param("sourceType", "VideoSourceType"), t.param("videoFrame", "VideoFrame"))),
  "onMediaPlayerVideoFrame": t.opt(t.func("void", t.param("videoFrame", "VideoFrame"), t.param("mediaPlayerId", "number"))),
  "onRenderVideoFrame": t.opt(t.func("void", t.param("channelId", "string"), t.param("remoteUid", "number"), t.param("videoFrame", "VideoFrame"))),
  "onTranscodedVideoFrame": t.opt(t.func("void", t.param("videoFrame", "VideoFrame")))
});
exports.IVideoFrameObserver = IVideoFrameObserver;
const IFaceInfoObserver = t.iface([], {
  "onFaceInfo": t.opt(t.func("void", t.param("outFaceInfo", "string")))
});
exports.IFaceInfoObserver = IFaceInfoObserver;
const IMediaRecorderObserver = t.iface([], {
  "onRecorderStateChanged": t.opt(t.func("void", t.param("channelId", "string"), t.param("uid", "number"), t.param("state", "RecorderState"), t.param("reason", "RecorderReasonCode"))),
  "onRecorderInfoUpdated": t.opt(t.func("void", t.param("channelId", "string"), t.param("uid", "number"), t.param("info", "RecorderInfo")))
});
exports.IMediaRecorderObserver = IMediaRecorderObserver;
const exportedTypeSuite = {
  IAudioPcmFrameSink,
  IAudioFrameObserverBase,
  IAudioFrameObserver,
  IAudioSpectrumObserver,
  IVideoEncodedFrameObserver,
  IVideoFrameObserver,
  IFaceInfoObserver,
  IMediaRecorderObserver
};
var _default = exportedTypeSuite;
exports.default = _default;
//# sourceMappingURL=AgoraMediaBase-ti.js.map