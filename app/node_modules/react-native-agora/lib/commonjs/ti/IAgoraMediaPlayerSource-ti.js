"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.IMediaPlayerSourceObserver = void 0;
var t = _interopRequireWildcard(require("ts-interface-checker"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * This module was automatically generated by `ts-interface-builder`
 */

// tslint:disable:object-literal-key-quotes

const IMediaPlayerSourceObserver = t.iface([], {
  "onPlayerSourceStateChanged": t.opt(t.func("void", t.param("state", "MediaPlayerState"), t.param("reason", "MediaPlayerReason"))),
  "onPositionChanged": t.opt(t.func("void", t.param("positionMs", "number"), t.param("timestampMs", "number"))),
  "onPlayerEvent": t.opt(t.func("void", t.param("eventCode", "MediaPlayerEvent"), t.param("elapsedTime", "number"), t.param("message", "string"))),
  "onMetaData": t.opt(t.func("void", t.param("data", "Uint8Array"), t.param("length", "number"))),
  "onPlayBufferUpdated": t.opt(t.func("void", t.param("playCachedBuffer", "number"))),
  "onPreloadEvent": t.opt(t.func("void", t.param("src", "string"), t.param("event", "PlayerPreloadEvent"))),
  "onCompleted": t.opt(t.func("void")),
  "onAgoraCDNTokenWillExpire": t.opt(t.func("void")),
  "onPlayerSrcInfoChanged": t.opt(t.func("void", t.param("from", "SrcInfo"), t.param("to", "SrcInfo"))),
  "onPlayerInfoUpdated": t.opt(t.func("void", t.param("info", "PlayerUpdatedInfo"))),
  "onPlayerCacheStats": t.opt(t.func("void", t.param("stats", "CacheStatistics"))),
  "onPlayerPlaybackStats": t.opt(t.func("void", t.param("stats", "PlayerPlaybackStats"))),
  "onAudioVolumeIndication": t.opt(t.func("void", t.param("volume", "number")))
});
exports.IMediaPlayerSourceObserver = IMediaPlayerSourceObserver;
const exportedTypeSuite = {
  IMediaPlayerSourceObserver
};
var _default = exportedTypeSuite;
exports.default = _default;
//# sourceMappingURL=IAgoraMediaPlayerSource-ti.js.map