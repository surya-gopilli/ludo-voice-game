import { createCheckers } from 'ts-interface-checker';
import { parseIntPtr2Number } from '../Utils';
import { IRtcEngineExImpl } from '../impl/IAgoraRtcEngineExImpl';
import AgoraBaseTI from '../ti/AgoraBase-ti';
import AgoraMediaBaseTI from '../ti/AgoraMediaBase-ti';
import IAgoraRtcEngineTI from '../ti/IAgoraRtcEngine-ti';
import { H265TranscoderInternal } from './AgoraH265TranscoderInternal';
import { DeviceEventEmitter, EVENT_TYPE, callIrisApi } from './IrisApiEngine';
import { LocalSpatialAudioEngineInternal } from './LocalSpatialAudioEngineInternal';
import { MediaEngineInternal } from './MediaEngineInternal';
import { MediaPlayerInternal } from './MediaPlayerInternal';
import { MediaRecorderInternal } from './MediaRecorderInternal';
import { MusicContentCenterInternal } from './MusicContentCenterInternal';
const checkers = createCheckers(AgoraBaseTI, AgoraMediaBaseTI, IAgoraRtcEngineTI);
export class RtcEngineExInternal extends IRtcEngineExImpl {
  static _event_handlers = [];
  static _direct_cdn_streaming_event_handler = [];
  static _metadata_observer = [];
  static _audio_encoded_frame_observers = [];
  static _audio_spectrum_observers = [];
  _media_engine = new MediaEngineInternal();
  _music_content_center = new MusicContentCenterInternal();
  _local_spatial_audio_engine = new LocalSpatialAudioEngineInternal();
  _h265_transcoder = new H265TranscoderInternal();
  initialize(context) {
    const ret = super.initialize(context);
    callIrisApi.call(this, 'RtcEngine_setAppType', {
      appType: 8
    });
    return ret;
  }
  release() {
    let sync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    this._media_engine.release();
    this._local_spatial_audio_engine.release();
    RtcEngineExInternal._event_handlers.map(it => {
      super.unregisterEventHandler(it);
    });
    RtcEngineExInternal._event_handlers = [];
    RtcEngineExInternal._direct_cdn_streaming_event_handler = [];
    RtcEngineExInternal._metadata_observer = [];
    RtcEngineExInternal._audio_encoded_frame_observers = [];
    RtcEngineExInternal._audio_spectrum_observers = [];
    MediaPlayerInternal._source_observers.clear();
    MediaPlayerInternal._audio_frame_observers.clear();
    MediaPlayerInternal._video_frame_observers.clear();
    MediaPlayerInternal._audio_spectrum_observers.clear();
    MediaRecorderInternal._observers.clear();
    this._h265_transcoder.release();
    this.removeAllListeners();
    super.release(sync);
  }
  _addListenerPreCheck(eventType) {
    var _checkers$IRtcEngineE, _checkers$IDirectCdnS, _checkers$IMetadataOb, _checkers$IAudioEncod, _checkers$IAudioSpect;
    if ((_checkers$IRtcEngineE = checkers.IRtcEngineEventHandler) !== null && _checkers$IRtcEngineE !== void 0 && _checkers$IRtcEngineE.strictTest({
      [eventType]: undefined
    })) {
      if (RtcEngineExInternal._event_handlers.length === 0) {
        this.registerEventHandler({});
      }
    }
    if ((_checkers$IDirectCdnS = checkers.IDirectCdnStreamingEventHandler) !== null && _checkers$IDirectCdnS !== void 0 && _checkers$IDirectCdnS.strictTest({
      [eventType]: undefined
    })) {
      if (RtcEngineExInternal._direct_cdn_streaming_event_handler.length === 0) {
        console.error('Please call `startDirectCdnStreaming` before you want to receive event by `addListener`');
        return false;
      }
    }
    if ((_checkers$IMetadataOb = checkers.IMetadataObserver) !== null && _checkers$IMetadataOb !== void 0 && _checkers$IMetadataOb.strictTest({
      [eventType]: undefined
    })) {
      if (RtcEngineExInternal._metadata_observer.length === 0) {
        console.error('Please call `registerMediaMetadataObserver` before you want to receive event by `addListener`');
        return false;
      }
    }
    if ((_checkers$IAudioEncod = checkers.IAudioEncodedFrameObserver) !== null && _checkers$IAudioEncod !== void 0 && _checkers$IAudioEncod.strictTest({
      [eventType]: undefined
    })) {
      if (RtcEngineExInternal._audio_encoded_frame_observers.length === 0) {
        console.error('Please call `registerAudioEncodedFrameObserver` before you want to receive event by `addListener`');
        return false;
      }
    }
    if ((_checkers$IAudioSpect = checkers.IAudioSpectrumObserver) !== null && _checkers$IAudioSpect !== void 0 && _checkers$IAudioSpect.strictTest({
      [eventType]: undefined
    })) {
      if (RtcEngineExInternal._audio_spectrum_observers.length === 0) {
        this.registerAudioSpectrumObserver({});
      }
    }
    return true;
  }
  addListener(eventType, listener) {
    this._addListenerPreCheck(eventType);
    const callback = (eventProcessor, data) => {
      if (eventProcessor.type(data) !== EVENT_TYPE.IRtcEngine) {
        return;
      }
      eventProcessor.func.map(it => {
        it({
          [eventType]: listener
        }, eventType, data);
      });
    };
    // @ts-ignore
    listener.agoraCallback = callback;
    DeviceEventEmitter.addListener(eventType, callback);
  }
  removeListener(eventType, listener) {
    DeviceEventEmitter.removeListener(eventType,
    // @ts-ignore
    (listener === null || listener === void 0 ? void 0 : listener.agoraCallback) ?? listener);
  }
  removeAllListeners(eventType) {
    DeviceEventEmitter.removeAllListeners(eventType);
  }
  getVersion() {
    const apiType = 'RtcEngine_getVersion_915cb25';
    const jsonParams = {};
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return {
      build: jsonResults.build,
      version: jsonResults.result
    };
  }
  registerEventHandler(eventHandler) {
    // only call iris when no event handler registered
    let callIris = RtcEngineExInternal._event_handlers.length === 0;
    if (!RtcEngineExInternal._event_handlers.find(value => value === eventHandler)) {
      RtcEngineExInternal._event_handlers.push(eventHandler);
    }
    return callIris ? super.registerEventHandler(eventHandler) : true;
  }
  unregisterEventHandler(eventHandler) {
    RtcEngineExInternal._event_handlers = RtcEngineExInternal._event_handlers.filter(value => value !== eventHandler);
    // only call iris when no event handler registered
    let callIris = RtcEngineExInternal._event_handlers.length === 0;
    return callIris ? super.unregisterEventHandler(eventHandler) : true;
  }
  createMediaPlayer() {
    // @ts-ignore
    const mediaPlayerId = super.createMediaPlayer();
    return new MediaPlayerInternal(mediaPlayerId);
  }
  destroyMediaPlayer(mediaPlayer) {
    var _mediaPlayer$release;
    const ret = super.destroyMediaPlayer(mediaPlayer);
    (_mediaPlayer$release = mediaPlayer.release) === null || _mediaPlayer$release === void 0 ? void 0 : _mediaPlayer$release.call(mediaPlayer);
    return ret;
  }
  createMediaRecorder(info) {
    // @ts-ignore
    const nativeHandle = super.createMediaRecorder(info);
    return new MediaRecorderInternal(nativeHandle);
  }
  destroyMediaRecorder(mediaRecorder) {
    var _mediaRecorder$releas;
    const ret = super.destroyMediaRecorder(mediaRecorder);
    (_mediaRecorder$releas = mediaRecorder.release) === null || _mediaRecorder$releas === void 0 ? void 0 : _mediaRecorder$releas.call(mediaRecorder);
    return ret;
  }
  startDirectCdnStreaming(eventHandler, publishUrl, options) {
    if (!RtcEngineExInternal._direct_cdn_streaming_event_handler.find(value => value === eventHandler)) {
      RtcEngineExInternal._direct_cdn_streaming_event_handler.push(eventHandler);
    }
    return super.startDirectCdnStreaming(eventHandler, publishUrl, options);
  }
  registerMediaMetadataObserver(observer, type) {
    if (!RtcEngineExInternal._metadata_observer.find(value => value === observer)) {
      RtcEngineExInternal._metadata_observer.push(observer);
    }
    return super.registerMediaMetadataObserver(observer, type);
  }
  unregisterMediaMetadataObserver(observer, type) {
    RtcEngineExInternal._metadata_observer = RtcEngineExInternal._metadata_observer.filter(value => value !== observer);
    return super.unregisterMediaMetadataObserver(observer, type);
  }
  getApiTypeFromJoinChannel(token, channelId, uid, options) {
    return options === undefined ? 'RtcEngine_joinChannel_f097389' : 'RtcEngine_joinChannel_cdbb747';
  }
  getApiTypeFromLeaveChannel(options) {
    return options === undefined ? 'RtcEngine_leaveChannel' : 'RtcEngine_leaveChannel_2c0e3aa';
  }
  getApiTypeFromLeaveChannelEx(connection, options) {
    return options === undefined ? 'RtcEngineEx_leaveChannelEx_c81e1a4' : 'RtcEngineEx_leaveChannelEx_b03ee9a';
  }
  getApiTypeFromSetClientRole(role, options) {
    return options === undefined ? 'RtcEngine_setClientRole_3426fa6' : 'RtcEngine_setClientRole_b46cc48';
  }
  getApiTypeFromEnableDualStreamMode(enabled, streamConfig) {
    return streamConfig === undefined ? 'RtcEngine_enableDualStreamMode_5039d15' : 'RtcEngine_enableDualStreamMode_9822d8a';
  }
  getApiTypeFromSetDualStreamMode(mode, streamConfig) {
    return streamConfig === undefined ? 'RtcEngine_setDualStreamMode_3a7f662' : 'RtcEngine_setDualStreamMode_b3a4f6c';
  }
  getApiTypeFromJoinChannelWithUserAccount(token, channelId, userAccount, options) {
    return options === undefined ? 'RtcEngine_joinChannelWithUserAccount_0e4f59e' : 'RtcEngine_joinChannelWithUserAccount_4685af9';
  }
  getAudioDeviceManager() {
    throw 'Not support';
  }
  getVideoDeviceManager() {
    throw 'Not support';
  }
  getMediaEngine() {
    return this._media_engine;
  }
  getMusicContentCenter() {
    return this._music_content_center;
  }
  getLocalSpatialAudioEngine() {
    return this._local_spatial_audio_engine;
  }
  getH265Transcoder() {
    return this._h265_transcoder;
  }
  getNativeHandle() {
    let result = super.getNativeHandle();
    return parseIntPtr2Number(result);
  }
  registerAudioEncodedFrameObserver(config, observer) {
    if (!RtcEngineExInternal._audio_encoded_frame_observers.find(value => value === observer)) {
      RtcEngineExInternal._audio_encoded_frame_observers.push(observer);
    }
    return super.registerAudioEncodedFrameObserver(config, observer);
  }
  unregisterAudioEncodedFrameObserver(observer) {
    RtcEngineExInternal._audio_encoded_frame_observers = RtcEngineExInternal._audio_encoded_frame_observers.filter(value => value !== observer);
    return super.unregisterAudioEncodedFrameObserver(observer);
  }
  registerAudioSpectrumObserver(observer) {
    if (!RtcEngineExInternal._audio_spectrum_observers.find(value => value === observer)) {
      RtcEngineExInternal._audio_spectrum_observers.push(observer);
    }
    return super.registerAudioSpectrumObserver(observer);
  }
  unregisterAudioSpectrumObserver(observer) {
    RtcEngineExInternal._audio_spectrum_observers = RtcEngineExInternal._audio_spectrum_observers.filter(value => value !== observer);
    return super.unregisterAudioSpectrumObserver(observer);
  }
}
//# sourceMappingURL=RtcEngineExInternal.js.map